{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projeto Cloud Este foi um projeto feito em python juntamente com Docker para ser rodado em uma imagem Docker. Escopo Foi feito uma API utilizando 3 caminhos que foram : /registrar para criar um novo usuario, o /login para fazer login e pegar uma chave jwt e o /consultar que serve para voc\u00ea mandar o seu tolken valido e te retornar o valor do dolar diario com o valor mais alto e mais baixo daquele dia at\u00e9 ent\u00e3o. Imagem do Docker Imagem do projeto no Docker Execultando o Projeto Para come\u00e7ar execultar o projeto precisa fazer o Dowload do aqruivo compose.yaml asseguir: Baixar Arquivo aqui Ap\u00f3s baixar o arquivo \u00e9 s\u00f3 rodar o seguinte comando se tiver o Docker baixado em seu computador : docker-compose up -d Ap\u00f3s isso s\u00f3 ser\u00e1 precisso acessar o seguinte link: http://localhost:8000/docs Para maior referencia de como utilizar o API pode serguir o tutorial abaixo: Link do tutorial End Poits Para acessar a API pelo terminal, voc\u00ea pode usar o comando curl. Aqui est\u00e3o alguns exemplos de como usar a API: Criar Usuario: curl -X POST http://localhost:8000/registrar -d '{\"nome\": \"teste\", \"email\": \"teste@teste.com\", \"senha\": \"teste\"}' Login: curl -X POST http://localhost:8000/login -d '{\"email\": \"teste@teste.com\", \"senha\": \"teste\"}' Cota\u00e7\u00e3o maxima e minima do Dolar: curl -X GET http://localhost:8000/consultar \\ -H 'Authorization: Bearer {token_jwt_aqui}' Outra forma de testar \u00e9 usar o postman para fazer essas requisi\u00e7\u00f5es. Ou No proprio /docs onde pode testar com exemplos de l\u00e1, como mostrado no video. AWS Ap\u00f3s isso foi feito o deploy da Imagem na AWS. Que pode ser acessado atraves do link a seguir: http://a41a10da76e83446b9ccd150fbc97896-323563.us-east-1.elb.amazonaws.com/docs Ele funciona da mesma forma que o anterior, a seguir vou falar um pouco mais de como isso foi feito. Como foi feito o Build O build foi feito em alguns passos diferentes Primeiro passo: Foi feito dois novos arquivos um deles sendo o arquivo db-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: postgres spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres:13 env: - name: POSTGRES_USER value: \"user\" - name: POSTGRES_PASSWORD value: \"password\" - name: POSTGRES_DB value: \"dbname\" ports: - containerPort: 5432 --- apiVersion: v1 kind: Service metadata: name: postgres spec: ports: - port: 5432 targetPort: 5432 selector: app: postgres O outro arquivo seria o web-deployment.yaml: apiVersion: apps/v1 kind: Deployment metadata: name: fastapi spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: joaoagg/api_ja:web env: - name: DATABASE_URL value: \"postgresql://user:password@postgres:5432/dbname\" ports: - containerPort: 8000 --- apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi O segundo passo seria seria criar os clusters EKS: eksctl create cluster --name fast --region us-east-1 --nodes 2 Depois configurar o kubectl para acessar o cluster: aws eks --region us-east-1 update-kubeconfig --name fast Ap\u00f3s estes passos aplicamos o deployment nos clusters: kubectl apply -f db-deployment.yml kubectl apply -f web-deployment.yml Por \u00faltimo e n\u00e3o menos importante acessar a aplica\u00e7\u00e3o no Load Balancer: kubectl get svc fastapi-service Aqui temos um v\u00eddeo mostrando a API funcionando na AWS: Video da AWS funcionando","title":"Projeto Cloud"},{"location":"#projeto-cloud","text":"Este foi um projeto feito em python juntamente com Docker para ser rodado em uma imagem Docker.","title":"Projeto Cloud"},{"location":"#escopo","text":"Foi feito uma API utilizando 3 caminhos que foram : /registrar para criar um novo usuario, o /login para fazer login e pegar uma chave jwt e o /consultar que serve para voc\u00ea mandar o seu tolken valido e te retornar o valor do dolar diario com o valor mais alto e mais baixo daquele dia at\u00e9 ent\u00e3o.","title":"Escopo"},{"location":"#imagem-do-docker","text":"Imagem do projeto no Docker","title":"Imagem do Docker"},{"location":"#execultando-o-projeto","text":"Para come\u00e7ar execultar o projeto precisa fazer o Dowload do aqruivo compose.yaml asseguir: Baixar Arquivo aqui Ap\u00f3s baixar o arquivo \u00e9 s\u00f3 rodar o seguinte comando se tiver o Docker baixado em seu computador : docker-compose up -d Ap\u00f3s isso s\u00f3 ser\u00e1 precisso acessar o seguinte link: http://localhost:8000/docs Para maior referencia de como utilizar o API pode serguir o tutorial abaixo: Link do tutorial","title":"Execultando o Projeto"},{"location":"#end-poits","text":"Para acessar a API pelo terminal, voc\u00ea pode usar o comando curl. Aqui est\u00e3o alguns exemplos de como usar a API: Criar Usuario: curl -X POST http://localhost:8000/registrar -d '{\"nome\": \"teste\", \"email\": \"teste@teste.com\", \"senha\": \"teste\"}' Login: curl -X POST http://localhost:8000/login -d '{\"email\": \"teste@teste.com\", \"senha\": \"teste\"}' Cota\u00e7\u00e3o maxima e minima do Dolar: curl -X GET http://localhost:8000/consultar \\ -H 'Authorization: Bearer {token_jwt_aqui}' Outra forma de testar \u00e9 usar o postman para fazer essas requisi\u00e7\u00f5es. Ou No proprio /docs onde pode testar com exemplos de l\u00e1, como mostrado no video.","title":"End Poits"},{"location":"#aws","text":"Ap\u00f3s isso foi feito o deploy da Imagem na AWS. Que pode ser acessado atraves do link a seguir: http://a41a10da76e83446b9ccd150fbc97896-323563.us-east-1.elb.amazonaws.com/docs Ele funciona da mesma forma que o anterior, a seguir vou falar um pouco mais de como isso foi feito.","title":"AWS"},{"location":"#como-foi-feito-o-build","text":"O build foi feito em alguns passos diferentes Primeiro passo: Foi feito dois novos arquivos um deles sendo o arquivo db-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: postgres spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres:13 env: - name: POSTGRES_USER value: \"user\" - name: POSTGRES_PASSWORD value: \"password\" - name: POSTGRES_DB value: \"dbname\" ports: - containerPort: 5432 --- apiVersion: v1 kind: Service metadata: name: postgres spec: ports: - port: 5432 targetPort: 5432 selector: app: postgres O outro arquivo seria o web-deployment.yaml: apiVersion: apps/v1 kind: Deployment metadata: name: fastapi spec: replicas: 1 selector: matchLabels: app: fastapi template: metadata: labels: app: fastapi spec: containers: - name: fastapi image: joaoagg/api_ja:web env: - name: DATABASE_URL value: \"postgresql://user:password@postgres:5432/dbname\" ports: - containerPort: 8000 --- apiVersion: v1 kind: Service metadata: name: fastapi-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: fastapi O segundo passo seria seria criar os clusters EKS: eksctl create cluster --name fast --region us-east-1 --nodes 2 Depois configurar o kubectl para acessar o cluster: aws eks --region us-east-1 update-kubeconfig --name fast Ap\u00f3s estes passos aplicamos o deployment nos clusters: kubectl apply -f db-deployment.yml kubectl apply -f web-deployment.yml Por \u00faltimo e n\u00e3o menos importante acessar a aplica\u00e7\u00e3o no Load Balancer: kubectl get svc fastapi-service Aqui temos um v\u00eddeo mostrando a API funcionando na AWS: Video da AWS funcionando","title":"Como foi feito o Build"}]}